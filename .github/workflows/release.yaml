name: Release workflow
run-name: ${{ github.actor }} triggered Release workflow

on:
  push:
    branches:
      - "chore/GAT-6176"

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}"
  GAR_LOCATION: "${{ secrets.GAR_LOCATION }}"
  SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL}}"
  SLACK_CHANNEL: "${{ secrets.GITHUBACTIONS_SLACK_CHANNEL }}"
  NODE_VERSION: '21'

jobs:
  semantic: 
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: chore/GAT-6176

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # build:
  #   permissions:
  #     contents: write
  #     id-token: write
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       environment: [preprod, prod]
  #   environment: ${{ matrix.environment }} 

  
      # - name: Read VERSION file
      #   id: getversion
      #   run: |
      #     sed -n 's/^appVersion:\(.*\)/\1/p' < chart/gateway-web/Chart.yaml > version
      #     echo "version=$(sed '/.*\"\(.*\)\".*/ s//\1/g' version)" >> $GITHUB_OUTPUT

      # - name: Google Auth
      #   id: auth
      #   uses: "google-github-actions/auth@v2"
      #   with:
      #     token_format: "access_token"
      #     project_id: "${{ secrets.PROJECT_ID }}"
      #     workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
      #     service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      # - name: Login to GAR
      #   id: garlogin
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PROJECT_ID }}
      #     username: oauth2accesstoken
      #     password: ${{ steps.auth.outputs.access_token }}

      # - name: Build and Push Container
      #   id: build
      #   shell: bash
      #   env:
      #     GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
      #     PROJECT_ID: ${{ secrets.PROJECT_ID }}
      #     GAR_NAME: ${{ secrets.GAR_NAME }}

      #   run: |-
      #     docker build -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:${{ github.sha }} -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:latest --build-arg NEXT_PUBLIC_API_V1_URL=${{ vars.NEXT_PUBLIC_API_V1_URL }} --build-arg NEXT_PUBLIC_API_V1_IP_URL=${{ vars.NEXT_PUBLIC_API_V1_IP_URL }} --build-arg NEXT_PUBLIC_API_V2_URL=${{ vars.NEXT_PUBLIC_API_V2_URL }} --build-arg NEXT_PUBLIC_API_V2_IP_URL=${{ vars.NEXT_PUBLIC_API_V2_IP_URL }} --build-arg NEXT_PUBLIC_API_VERSION=${{ vars.NEXT_PUBLIC_API_VERSION}} --build-arg NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL }} --build-arg NEXT_PUBLIC_WORDPRESS_API_URL=${{ vars.NEXT_PUBLIC_WORDPRESS_API_URL }} --build-arg NEXT_PUBLIC_SERVICE_DESK_URL=${{ vars.NEXT_PUBLIC_SERVICE_DESK_URL }} --build-arg NEXT_PUBLIC_GATEWAY_URL=${{ vars.NEXT_PUBLIC_GATEWAY_URL }} --build-arg NEXT_PUBLIC_HOTJAR_ID=${{ vars.NEXT_PUBLIC_HOTJAR_ID }} --build-arg NEXT_PUBLIC_SCHEMA_NAME=${{ vars.NEXT_PUBLIC_SCHEMA_NAME }} --build-arg NEXT_PUBLIC_SCHEMA_VERSION=${{ vars.NEXT_PUBLIC_SCHEMA_VERSION }} --build-arg NEXT_PUBLIC_SCHEMA_BRANCH=${{ vars.NEXT_PUBLIC_SCHEMA_BRANCH }} --build-arg NEXT_PUBLIC_GTM_ID=${{ vars.NEXT_PUBLIC_GTM_ID }} --build-arg NEXT_PUBLIC_OA_APP_ID=${{ vars.NEXT_PUBLIC_OA_APP_ID }} --build-arg NEXT_PUBLIC_INCLUDE_BANNERS=${{ vars.NEXT_PUBLIC_INCLUDE_BANNERS }} --build-arg NEXT_PUBLIC_MEDIA_DOMAIN=${{ vars.NEXT_PUBLIC_MEDIA_DOMAIN }} --build-arg NEXT_PUBLIC_MEDIA_STATIC_URL=${{ vars.NEXT_PUBLIC_MEDIA_STATIC_URL }} ./
      #     docker push --all-tags '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}

      # - name: Run Notification
      #   id: runnotificationsent
      #   uses: act10ns/slack@v1
      #   with:
      #     status: ${{ job.status }}
      #     steps: ${{ toJson(steps) }}
      #     channel: ${{ env.SLACK_CHANNEL }}
      #     message: Running release build on {{ env.GITHUB_REF_NAME }} branch ${{ job.status }}
      #   if: always()
